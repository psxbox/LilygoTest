@page "/"
@using LilyGoTestBLE.Data;
@using Plugin.BLE.Abstractions.Contracts;
@using Plugin.BLE;

@inject BLEService BLEService
@inject NavigationManager NavMan

<h4 class="h4">BLE qurilmalar</h4>

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.MiddleCenter" AutoHide="true" Delay="5000" />

<div class="pb-2">
    <Button Color="ButtonColor.Primary" @onclick="ScanDevices" disabled="@(!scanButtonEnabled)">
        <Icon Name="IconName.Search"></Icon> Qidirish
    </Button>
</div>
@if (BLEService.Devices.Count == 0)
{
    <div class="alert alert-info" role="alert">@status</div>
}
else
{
    <table class="table table-responsive table-bordered table-striped">
        <thead>
            <tr class="align-middle">
                <th>
                    RSSI
                </th>
                <th>
                    Qurilma nomi
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var device in BLEService.Devices)
            {
                <tr class="align-middle">
                    <td>
                        @device.Rssi dB
                    </td>
                    <td>
                        @if (string.IsNullOrWhiteSpace(device.Name))
                        {
                            <span>Nomalum</span>
                        }
                        else
                        {
                            <span>@device.Name</span>
                        }
                        <br>
                        <small class="text-muted">@device.NativeDevice</small>
                    </td>
                    <td class="text-end">
                        <Button Color="ButtonColor.Secondary" @onclick="() => DeviceViewClick(device)">
                            <Icon Name="IconName.Eye"></Icon>
                        </Button>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td>
                    Soni:
                </td>
                <td>
                    @BLEService.Devices.Count
                </td>
                <td></td>
            </tr>
        </tfoot>
    </table>


}


@code {
    private bool scanButtonEnabled = true;
    private string status = "Qurilmalarni skanerlash uchun [Qidirish] tugmani bosing";
    //private string toastTitle = "Error";
    //private string toastSubTitle = "";
    //private string toastMgs = "Error";

    List<ToastMessage> messages = new List<ToastMessage>();

    private async Task ScanDevices()
    {
        status = "Qurilmalar qidirilmoqda...";
        scanButtonEnabled = false;
        await BLEService.ScanDevices();
        scanButtonEnabled = true;
    }

    protected override async Task OnInitializedAsync()
    {
        var locationPerm = await BLEService.CheckAndRequestLocationPermission();
        if (locationPerm != PermissionStatus.Granted)
        {
            messages.Add(new ToastMessage
                {
                    Type = ToastType.Warning,
                    Title = "Joylashuvni bilishga ruxsat yo'q",
                    HelpText = $"{DateTime.Now}",
                    Message = "Bluetooth dan foydalanish uchun joylashuvni bilishga ruxsat bo'lishi kerak!"
                });
        }

        var storagePerm = await BLEService.CheckAndRequestStoragePermission();
        if (storagePerm != PermissionStatus.Granted)
        {
            messages.Add(new ToastMessage
                {
                    Type = ToastType.Warning,
                    Title = "Xotiraga ruxsat yo'q",
                    HelpText = $"{DateTime.Now}",
                    Message = "Proshivka qilish uchun xotiraga ruxsat bo'lishi kerak!"
                });
        }

#if DEBUG
    Console.WriteLine("Initialize");
#endif
        await ScanDevices();
        await base.OnInitializedAsync();
    }

    private async Task DeviceViewClick(IDevice device)
    {
        await BLEService.StopScan();
        try
        {
            await BLEService.ConnectToDevice(device);
        }
        catch (Exception ex)
        {
            messages.Add(new ToastMessage
                {
                    Type = ToastType.Danger,
                    Title = "Error",
                    HelpText = $"{DateTime.Now}",
                    Message = ex.Message
                });
            return;
        }
        NavMan.NavigateTo($"/device_view/{device.NativeDevice}");
    }

}
